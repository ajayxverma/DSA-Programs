git --version : to check the git version
git config --global user.name "User Name" : to set the User name of Git 
git config --global user.email "User Email" : to set the Email 
git config --global user.email : to check which email id is configured
git config --global --edit : to open file in which the email id and user name is present
Git init :  The git init command creates a new Git repository. It can be used to convert an existing, unversioned project to a Git repository or initialize a new, empty repository. Most other Git commands are not available outside of an initialized repository, so this is usually the first command you'll run in a new project.
git status : git the status of the changes in the dir
git add fileName.java : to add in the staging area
git add . : adds all the files in the staging area
git commit -m "Commit message": for alll files to commit

git log : to chekc the changes in log
git branch : show the in which branch are you in 
git checkout 'hexcode' : to go to the previous commit using code 
git checkout branchName : to move from one branch to another one
create a file .gitignore to ignore commit to 

//To check the Git remote Origin url
git remote -v : 
git branch -M master :
git push -u origin master :


//Go to the branch you want to rename
git checkout branch-name


//To change the Branch name  Use the -m flag to change the name of the branch
git branch -m new-branch-name

// You can then connect this remote repository to your local Git repository with the following command:

$ git remote add origin <remote repository URL>

//The final step is to push your changes from your local repository to your new remote repository:

$ git push origin master

//In order to change the URL of a Git remote, you have to use the “git remote set-url” command and specify the name of the remote as well as the new remote URL to be changed.

$ git remote set-url <remote_name> <remote_url>

ex : $ git remote set-url origin https://git-repo/new-repository.git
//It you get error of mis amthc of 
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Integrate the remote changes (e.g.
hint: 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.

Try: git pull --rebase origin main



//If the local branch is behind from the git branch then

git pull --rebase origin master //master is your branch name
git push origin master //master is your branch name
//create a new branch and swith to the new branch
git switch -c new-branch
